name: ci_meson

on:
  push:
    branches: [ main ]
    #paths:
    #  - "**meson.build"
    #  - "**.cpp"
    #  - "**.c"
    #  - "**.h"
  pull_request:
    branches: [ main ]
    #paths:
    #  - "**meson.build"
    #  - "**.cpp"
    #  - "**.c"
    #  - "**.h"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release
  
jobs:

  build-linux:
      runs-on: ubuntu-latest
      
      steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          
      - name: install meson
        run: pip install meson ninja
      
      - name: configure meson
        run: meson setup builddir/
        env:
          CC: gcc
          
      - name: build and test
        run: meson test -C builddir/ -v
        
      
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: Linux_Meson_Testlog
          path: builddir/meson-logs/testlog.txt

#   macos:
#     runs-on: macos-latest
#     steps:
#     - uses: actions/checkout@v1
#     - uses: actions/setup-python@v1
#       with:
#         python-version: '3.x'
#     - run: brew install gcc
#     - run: pip install meson ninja
#     - run: meson setup builddir/
#       env:
#         CC: gcc
#     - run: meson test -C builddir/ -v
#     - uses: actions/upload-artifact@v1
#       if: failure()
#       with:
#         name: MacOS_Meson_Testlog
#         path: builddir/meson-logs/testlog.txt

#   windows:
#     runs-on: windows-latest
#     steps:
#     - uses: actions/checkout@v1
#     - uses: actions/setup-python@v1
#       with:
#         python-version: '3.x'
#     - run: pip install meson ninja
#     - run: meson setup builddir/
#       env:
#         CC: gcc
#     - run: meson test -C builddir/ -v
#     - uses: actions/upload-artifact@v1
#       if: failure()
#       with:
#         name: Windows_Meson_Testlog
#         path: builddir/meson-logs/testlog.txt




# jobs:
#   build:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      
